<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Hero 3D Network</title>
    <style>
      html, body {
        margin: 0;
        padding: 0;
        background-color: #001f2f;
        overflow: hidden;
      }
      canvas {
        display: block;
      }
    </style>
  </head>
  <body>
    <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.150.1/examples/js/controls/OrbitControls.js"></script>
    <script>
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      const sphereGeometry = new THREE.SphereGeometry(3, 32, 32);
      const wireframe = new THREE.WireframeGeometry(sphereGeometry);
      const globe = new THREE.LineSegments(wireframe, new THREE.LineBasicMaterial({ color: 0x00ffff }));
      scene.add(globe);

      const connectionMaterial = new THREE.LineBasicMaterial({ color: 0x00ff99, transparent: true, opacity: 0.5 });

      function createRandomConnection() {
        const [lat1, lon1, lat2, lon2] = Array.from({ length: 4 }, () => Math.random() * 360);

        const toXYZ = (lat, lon) => {
          const phi = (90 - lat) * (Math.PI / 180);
          const theta = (lon + 180) * (Math.PI / 180);
          const r = 3.01;
          return new THREE.Vector3(
            r * Math.sin(phi) * Math.cos(theta),
            r * Math.cos(phi),
            r * Math.sin(phi) * Math.sin(theta)
          );
        };

        const points = [toXYZ(lat1, lon1), toXYZ(lat2, lon2)];
        const geo = new THREE.BufferGeometry().setFromPoints(points);
        const line = new THREE.Line(geo, connectionMaterial);
        scene.add(line);
      }

      for (let i = 0; i < 50; i++) createRandomConnection();

      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.autoRotate = true;
      controls.autoRotateSpeed = 0.5;
      controls.enableZoom = false;

      camera.position.z = 8;

      window.addEventListener("resize", () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });

      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }

      animate();
    </script>
  </body>
</html>
